#VPC CLOUDFORMATION TEMPLATE

AWSTemplateFormatVersion: "2010-09-09"

Description: "This template produces a VPC with public and private subnets"
  

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "VPC CIDR"
        Parameters: 
          - VpcCIDR
          
      - 
        Label: 
          default: "Subnets"
        Parameters: 
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR
          - PrivateSubnet4CIDR

      - 
        Label: 
          default: "SSH"
        Parameters: 
          - SSHLocation

    
Parameters:
  VpcCIDR: 
    Default: 10.0.0.0/16
    Description: Please enter IP Range (CIDR notation) for VPC
    Type: String

  PublicSubnet1CIDR: 
    Default: 10.0.0.0/24
    Description: Please enter IP Range (CIDR notation) for the public subnet 1
    Type: String

  PublicSubnet2CIDR: 
    Default: 10.0.1.0/24
    Description: Please enter IP Range (CIDR notation) for the public subnet 2
    Type: String

  PrivateSubnet1CIDR: 
    Default: 10.0.2.0/24
    Description: Please enter IP Range (CIDR notation) for the private subnet 1
    Type: String

  PrivateSubnet2CIDR: 
    Default: 10.0.3.0/24
    Description: Please enter IP Range (CIDR notation) for the private subnet 2
    Type: String

  PrivateSubnet3CIDR: 
    Default: 10.0.4.0/24
    Description: Please enter IP Range (CIDR notation) for the private subnet 3
    Type: String

  PrivateSubnet4CIDR: 
    Default: 10.0.5.0/24
    Description: Please enter IP Range (CIDR notation) for the private subnet 4
    Type: String

  SSHLocation:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: The IPrange must be a valid CIDR Value of y.y.y.y/z
    Default: 0.0.0.0/0
    Description: The IP Range that can be used to access the web servers using SSH
    MaxLength: "18"
    MinLength: "9"
    Type: String

#Rules:
  

#Mappings:
  

#Conditions:
  
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties: 
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: True
      EnableDnsSupport: True
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: Test VPC

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties: 
      Tags: 
        - Key: Name
          Value: Internet Gateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
      
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: True
      Tags: 
        - Key: Name
          Value: Public Subnet 1
      VpcId: !Ref VPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: True
      Tags: 
        - Key: Name
          Value: Public Subnet 2
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: Public RouteTable
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
      
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: False
      Tags: 
        - Key: Name
          Value: Private Subnet 1|App Tier
      VpcId: !Ref VPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: False
      Tags: 
        - Key: Name
          Value: Private Subnet 2|App Tier
      VpcId: !Ref VPC

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: False
      Tags: 
        - Key: Name
          Value: Private Subnet 3|DB Tier
      VpcId: !Ref VPC

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet4CIDR
      MapPublicIpOnLaunch: False
      Tags: 
        - Key: Name
          Value: Private Subnet 4|DB Tier
      VpcId: !Ref VPC

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http/https to client host
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ALB-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh to client host
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: SSH-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation

  WebServersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http/https to client host
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WebServers-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SSHSecurityGroup

  DBServersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from App Tier SG to client host
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DBServers-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServersSecurityGroup
        

#Outputs:
Outputs:
  VPC:
    Description: VPC Id
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC

  PublicSubnet1:
    Description: Public Subnet 1 Id
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Description: Public Subnet 2 Id
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2

  PrivateSubnet1:
    Description: Private Subnet 1 Id
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Description: Private Subnet 2 Id
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2

  PrivateSubnet3:
    Description: Private Subnet 3 Id
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3

  PrivateSubnet4:
    Description: Private Subnet 4 Id
    Value: !Ref PrivateSubnet4
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet4

  ALBSecutityGroup:
    Description: ALB-SG Id
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-ALBSecurityGroup

  SSHSecutityGroup:
    Description: SSH-SG Id
    Value: !Ref SSHSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-SSHSecurityGroup

  WebServersSecutityGroup:
    Description: WB-SG Id
    Value: !Ref WebServersSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-WebServersSecurityGroup

  DBServersSecutityGroup:
    Description: DB-SG Id
    Value: !Ref DBServersSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-DBSecurityGroup
  
